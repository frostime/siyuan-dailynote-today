name: Create Release on Tag Push

on:
  push:
    tags:
      - "v*"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Checkout
      - name: Checkout
        uses: actions/checkout@v3

      - uses: actions-ecosystem/action-regex-match@v2
        id: regex-match
        with:
          text: ${{ github.ref_name }}
          regex: '^v\d+\.\d+\.\d+(-\w+)?'

      # Install Node.js
      - name: Install Node.js
        if: ${{ steps.regex-match.outputs.match != '' }}
        uses: actions/setup-node@v3
        with:
          node-version: 18
          registry-url: "https://registry.npmjs.org"

        # Install pnpm
      - name: Install pnpm
        if: ${{ steps.regex-match.outputs.match != '' }}
        uses: pnpm/action-setup@v2
        id: pnpm-install
        with:
          version: 8
          run_install: false

      # Get pnpm store directory
      - name: Get pnpm store directory
        if: ${{ steps.regex-match.outputs.match != '' }}
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      # Setup pnpm cache
      - name: Setup pnpm cache
        if: ${{ steps.regex-match.outputs.match != '' }}
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      # Install dependencies
      - name: Install dependencies
        if: ${{ steps.regex-match.outputs.match != '' }}
        run: pnpm install --no-frozen-lockfile

      # Build for production, 这一步会生成一个 package.zip
      - name: Build for production
        if: ${{ steps.regex-match.outputs.match != '' }}
        run: pnpm build

      - name: Release
        if: ${{ steps.regex-match.outputs.match != '' && steps.regex-match.outputs.group1 == '' }}
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          artifactErrorsFailBuild: true
          artifacts: "package.zip"
          token: ${{ secrets.GITHUB_TOKEN }}
          prerelease: false

      - name: Prerelease
        if: ${{ steps.regex-match.outputs.match != '' && steps.regex-match.outputs.group1 != '' }}
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          artifactErrorsFailBuild: true
          artifacts: "package.zip"
          token: ${{ secrets.GITHUB_TOKEN }}
          prerelease: true
